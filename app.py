import numpy as np# import Flask, jsonifyfrom flask import Flask, jsonify# Import Dependenciesimport sqlalchemyfrom sqlalchemy.ext.automap import automap_basefrom sqlalchemy.orm import Sessionfrom sqlalchemy import create_enginefrom sqlalchemy import func################################################## Database Setup#################################################engine = create_engine("sqlite:///Resources/hawaii.sqlite")# reflect an existing database into a new modelBase = automap_base()# reflect the tablesBase.prepare(engine, reflect=True)# Save reference to the tableMeasurement = Base.classes.measurementStation = Base.classes.station################################################## Flask Setup#################################################app = Flask(__name__)# Home page that lists available routes@app.route("/")def home():    # print("Server received request for 'Home' page...")    return (        f"Welcome to Climate App home page!<br/>"        f"Available Routes:<br/>"        f"/api/v1.0/precipitation<br/>"        f"/api/v1.0/stations<br/>"        f"/api/v1.0/tobs<br/>"        f"/api/v1.0/'2015-06-14'<br/>"        f"/api/v1.0/2015-08-26/2017-03-09"    )# precipitation route@app.route("/api/v1.0/precipitation")def precipitation():    # Create our session (link) from Python to the DB    session = Session(engine)    """Return a list of dates and prcp values names"""    # Query dates and prcp values    results = session.query(Measurement.date,Measurement.prcp).filter(Measurement.date >= '2016-08-23').all()    session.close()    # Convert list of tuples into normal list    #prcp_list = list(np.ravel(results))        # Convert list of tuples to dict    prcp_dict = dict(results)    return jsonify(prcp_dict)#### Making /api/v1.0/stations route@app.route("/api/v1.0/stations")def stations():    # Create our session (link) from Python to the DB    session = Session(engine)    """Return a list of dates and prcp values names"""    # Query list of stations from the dataset    station_list = session.query(Measurement.station).group_by(Measurement.station).all()    session.close()    # Return a JSON list of stations from the dataset    return jsonify(station_list)#### Making /api/v1.0/tobs route@app.route("/api/v1.0/tobs")def tobs():    # Create our session (link) from Python to the DB    session = Session(engine)    """Return a list of dates and prcp values names"""    # Query list of tobs for most active station for last year of data from the dataset    tobs_list = session.query(Measurement.tobs).filter(Measurement.station == 'USC00519281').filter(Measurement.date >= '2016-08-23').all()    session.close()    # Return a JSON list of stations from the dataset    return jsonify(tobs_list)#### Making /api/v1.0/<start> route@app.route("/api/v1.0/<start>")def start(start):    """Fetch the start date that matches       the path variable supplied by the user"""           # Create our session (link) from Python to the DB    session = Session(engine)    """Return a list of dates and prcp values names"""    # Query min tobs for all dates after start date    min_tobs = session.query(func.min(Measurement.tobs)).filter(Measurement.date >= start).all()         # Query avg tobs for all dates after start date    avg_tobs = session.query(func.avg(Measurement.tobs)).filter(Measurement.date >= start).all()        # Query max tobs for all dates after start date    max_tobs = session.query(func.max(Measurement.tobs)).filter(Measurement.date >= start).all()    session.close()        list_tobs = list()    list_tobs.append(min_tobs)    list_tobs.append(avg_tobs)    list_tobs.append(max_tobs)        # Return a JSON list of min, avg, and max    return jsonify(list_tobs)          #### Making /api/v1.0/<start>/<end> route@app.route("/api/v1.0/<start>/<end>")def startend(start, end):    """Fetch the start & end date that matches        the path variable supplied by the user """           # Create our session (link) from Python to the DB    session = Session(engine)    """Return a list of dates and prcp values names"""    # Query min tobs for all dates after start date, before end date (inclusive)    min_tobs2 = session.query(func.min(Measurement.tobs)).filter(Measurement.date >= start).filter(Measurement.date <= end).all()        # Query avg tobs for all dates after start date, before end date (inclusive)    avg_tobs2 = session.query(func.avg(Measurement.tobs)).filter(Measurement.date >= start).filter(Measurement.date <= end).all()        # Query max tobs for all dates after start date, before end date (inclusive)    max_tobs2 = session.query(func.max(Measurement.tobs)).filter(Measurement.date >= start).filter(Measurement.date <= end).all()    session.close()        list_tobs2 = list()    list_tobs2.append(min_tobs2)    list_tobs2.append(avg_tobs2)    list_tobs2.append(max_tobs2)        # Return a JSON list of min, avg, and max    return jsonify(list_tobs2)if __name__ == "__main__":    app.run(debug=True)                    